import{_ as e,c as n,o as a,a2 as s}from"./chunks/framework.ClDkF6YQ.js";const u=JSON.parse('{"title":"High availability with Redis Sentinel","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Java/中间件/redis/HighAvailable.md","filePath":"articles/Java/中间件/redis/HighAvailable.md"}'),i={name:"articles/Java/中间件/redis/HighAvailable.md"},t=s(`<h1 id="high-availability-with-redis-sentinel" tabindex="-1">High availability with Redis Sentinel <a class="header-anchor" href="#high-availability-with-redis-sentinel" aria-label="Permalink to &quot;High availability with Redis Sentinel&quot;">​</a></h1><p>宏观层面Sentinel的能力：</p><p>1、 <strong>监控</strong>。Sentinel 会持续监测主从实例的健康状态。</p><p>2、<strong>通知</strong>。Sentinel 可以通过API通知系统管理员，被监控实例发生异常。</p><p>3、<strong>自动故障切换</strong>。当master下线，Sentinel 会提拔一个replica为master。其他replica会被重新配置，连接新master。</p><p>4、<strong>提供配置</strong>。Sentinel 作为服务发现的提供者。客户端连接Sentinel 来询问当前提供服务的主节点。如果故障切换发生，Sentinel 会通知新的地址。</p><h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><h2 id="运行sentinel" tabindex="-1">运行Sentinel <a class="header-anchor" href="#运行sentinel" aria-label="Permalink to &quot;运行Sentinel&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-sentinel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/sentinel.conf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/sentinel.conf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sentinel</span></span></code></pre></div><p>Sentinel运行命令强制携带conf参数，并且conf是可写的。这个文件将被用来保存当前状态。Sentinels 默认端口26379。</p><h2 id="sentinel-部署要点" tabindex="-1">Sentinel 部署要点 <a class="header-anchor" href="#sentinel-部署要点" aria-label="Permalink to &quot;Sentinel 部署要点&quot;">​</a></h2><ol><li>至少三个Sentinel实例才能保证鲁棒性。</li><li>三个Sentinel实例应当部署在各自独立的环境，以保证鲁棒性。</li><li>Sentinel + Redis分布式系统不保证故障期间写入被确认。因为redis的备份是异步的。</li><li>需要用支持Sentinel 的客户端来访问。</li><li><strong>Sentinel, Docker,</strong> 或者其他形式的NAT、端口映射需要小心处理。</li></ol><h2 id="配置sentinel" tabindex="-1">配置Sentinel <a class="header-anchor" href="#配置sentinel" aria-label="Permalink to &quot;配置Sentinel&quot;">​</a></h2><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sentinel monitor mymaster 127.0.0.1 6379 2</span></span>
<span class="line"><span>sentinel down-after-milliseconds mymaster 60000</span></span>
<span class="line"><span>sentinel failover-timeout mymaster 180000</span></span>
<span class="line"><span>sentinel parallel-syncs mymaster 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sentinel monitor resque 192.168.1.3 6380 4</span></span>
<span class="line"><span>sentinel down-after-milliseconds resque 10000</span></span>
<span class="line"><span>sentinel failover-timeout resque 180000</span></span>
<span class="line"><span>sentinel parallel-syncs resque 5</span></span></code></pre></div>`,14),l=[t];function r(p,o,h,c,d,g){return a(),n("div",null,l)}const k=e(i,[["render",r]]);export{u as __pageData,k as default};
