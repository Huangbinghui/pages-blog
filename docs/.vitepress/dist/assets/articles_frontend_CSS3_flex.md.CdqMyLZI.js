import{_ as e,c as o,o as l,a2 as r,aj as t,ak as a,al as i,am as c,an as n,ao as s}from"./chunks/framework.ClDkF6YQ.js";const C=JSON.parse('{"title":"flex 布局的基本概念","description":"","frontmatter":{},"headers":[],"relativePath":"articles/frontend/CSS3/flex.md","filePath":"articles/frontend/CSS3/flex.md"}'),d={name:"articles/frontend/CSS3/flex.md"},x=r('<h1 id="flex-布局的基本概念" tabindex="-1">flex 布局的基本概念 <a class="header-anchor" href="#flex-布局的基本概念" aria-label="Permalink to &quot;flex 布局的基本概念&quot;">​</a></h1><p>Flexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。本文给出了 flexbox 的主要特性，更多的细节将在别的文档中探索。</p><p>我们说 flexbox 是一种一维的布局，是因为一个 flexbox 一次只能处理一个维度上的元素布局，一行或者一列。作为对比的是另外一个二维布局 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_grid_layout" target="_blank" rel="noreferrer">CSS Grid Layout</a>，可以同时处理行和列上的布局。</p><h2 id="flexbox-的两根轴线" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flexbox_%E7%9A%84%E4%B8%A4%E6%A0%B9%E8%BD%B4%E7%BA%BF" target="_blank" rel="noreferrer">flexbox 的两根轴线</a> <a class="header-anchor" href="#flexbox-的两根轴线" aria-label="Permalink to &quot;[flexbox 的两根轴线](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flexbox_的两根轴线)&quot;">​</a></h2><p>当使用 flex 布局时，首先想到的是两根轴线 — 主轴和交叉轴。主轴由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-direction" target="_blank" rel="noreferrer"><code>flex-direction</code></a> 定义，另一根轴垂直于它。我们使用 flexbox 的所有属性都跟这两根轴线有关，所以有必要在一开始首先理解它。</p><h3 id="主轴" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#%E4%B8%BB%E8%BD%B4" target="_blank" rel="noreferrer">主轴</a> <a class="header-anchor" href="#主轴" aria-label="Permalink to &quot;[主轴](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#主轴)&quot;">​</a></h3><p>主轴由 <code>flex-direction</code> 定义，可以取 4 个值：</p><ul><li><code>row</code></li><li><code>row-reverse</code></li><li><code>column</code></li><li><code>column-reverse</code></li></ul><p>如果你选择了 <code>row</code> 或者 <code>row-reverse</code>，你的主轴将沿着 <strong>inline</strong> 方向延伸。</p><p><img src="'+t+'" alt="If flex-direction is set to row the main axis runs along the row in the inline direction."></p><p>选择 <code>column</code> 或者 <code>column-reverse</code> 时，你的主轴会沿着上下方向延伸 — 也就是 <strong>block 排列的方向。</strong></p><p><img src="'+a+'" alt="If flex-direction is set to column the main axis runs in the block direction."></p><h3 id="交叉轴" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#%E4%BA%A4%E5%8F%89%E8%BD%B4" target="_blank" rel="noreferrer">交叉轴</a> <a class="header-anchor" href="#交叉轴" aria-label="Permalink to &quot;[交叉轴](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#交叉轴)&quot;">​</a></h3><p>交叉轴垂直于主轴，所以如果你的<code>flex-direction</code> (主轴) 设成了 <code>row</code> 或者 <code>row-reverse</code> 的话，交叉轴的方向就是沿着列向下的。</p><p><img src="'+i+'" alt="If flex-direction is set to row then the cross axis runs in the block direction."></p><p>如果主轴方向设成了 <code>column</code> 或者 <code>column-reverse</code>，交叉轴就是水平方向。</p><p><img src="'+c+'" alt="If flex-direction is set to column then the cross axis runs in the inline direction."></p><p>理解主轴和交叉轴的概念对于对齐 flexbox 里面的元素是很重要的；flexbox 的特性是沿着主轴或者交叉轴对齐之中的元素。</p><h2 id="起始线和终止线" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#%E8%B5%B7%E5%A7%8B%E7%BA%BF%E5%92%8C%E7%BB%88%E6%AD%A2%E7%BA%BF" target="_blank" rel="noreferrer">起始线和终止线</a> <a class="header-anchor" href="#起始线和终止线" aria-label="Permalink to &quot;[起始线和终止线](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#起始线和终止线)&quot;">​</a></h2><p>另外一个需要理解的重点是 flexbox 不会对文档的书写模式提供假设。过去，CSS 的书写模式主要被认为是水平的，从左到右的。现代的布局方式涵盖了书写模式的范围，所以我们不再假设一行文字是从文档的左上角开始向右书写，新的行也不是必须出现在另一行的下面。</p><p>你可以在接下来的文章中学到更多 flexbox 和书写模式关系的详细说明。下面的描述是来帮助我们理解为什么不用上下左右来描述 flexbox 元素的方向。</p><p>如果 <code>flex-direction</code> 是 <code>row</code> ，并且我是在书写英文，那么主轴的起始线是左边，终止线是右边。</p><p><img src="'+n+'" alt="Working in English the start edge is on the left."></p><p>在这两种情况下，交叉轴的起始线是 flex 容器的顶部，终止线是底部，因为两种语言都是水平书写模式。</p><p>之后，你会觉得用起始和终止来描述比左右更合适，这会对你理解其他相同模式的布局方法（例如：CSS Grid Layout）起到帮助的作用。</p><h2 id="flex-容器" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flex_%E5%AE%B9%E5%99%A8" target="_blank" rel="noreferrer">Flex 容器</a> <a class="header-anchor" href="#flex-容器" aria-label="Permalink to &quot;[Flex 容器](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flex_容器)&quot;">​</a></h2><p>文档中采用了 flexbox 的区域就叫做 flex 容器。为了创建 flex 容器，我们把一个容器的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noreferrer"><code>display</code></a> 属性值改为 <code>flex</code> 或者 <code>inline-flex</code>。完成这一步之后，容器中的直系子元素就会变为 <strong>flex 元素</strong>。所有 CSS 属性都会有一个初始值，所以 flex 容器中的所有 flex 元素都会有下列行为：</p><ul><li>元素排列为一行 (<code>flex-direction</code> 属性的初始值是 <code>row</code>)。</li><li>元素从主轴的起始线开始。</li><li>元素不会在主维度方向拉伸，但是可以缩小。</li><li>元素被拉伸来填充交叉轴大小。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis" target="_blank" rel="noreferrer"><code>flex-basis</code></a> 属性为 <code>auto</code>。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap" target="_blank" rel="noreferrer"><code>flex-wrap</code></a> 属性为 <code>nowrap</code>。</li></ul><p>这会让你的元素呈线形排列，并且把自己的大小作为主轴上的大小。如果有太多元素超出容器，它们会溢出而不会换行。如果一些元素比其他元素高，那么元素会沿交叉轴被拉伸来填满它的大小。</p><iframe width="100%" height="480" src="https://mdn.github.io/css-examples/flexbox/basics/the-flex-container.html" loading="lazy" style="box-sizing:content-box;border:1px solid var(--border-primary);max-width:100%;width:calc((100% - 2rem) - 2px);background:rgb(255, 255, 255);border-radius:var(--elem-radius);padding:1rem;color:rgb(255, 255, 255);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"></iframe><h3 id="更改-flex-方向-flex-direction" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#%E6%9B%B4%E6%94%B9_flex_%E6%96%B9%E5%90%91_flex-direction" target="_blank" rel="noreferrer">更改 flex 方向 flex-direction</a> <a class="header-anchor" href="#更改-flex-方向-flex-direction" aria-label="Permalink to &quot;[更改 flex 方向 flex-direction](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#更改_flex_方向_flex-direction)&quot;">​</a></h3><p>在 flex 容器中添加 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-direction" target="_blank" rel="noreferrer"><code>flex-direction</code></a> 属性可以让我们更改 flex 元素的排列方向。设置 <code>flex-direction: row-reverse</code> 可以让元素沿着行的方向显示，但是起始线和终止线位置会交换。</p><p>把 flex 容器的属性 <code>flex-direction</code> 改为 <code>column</code> ，主轴和交叉轴交换，元素沿着列的方向排列显示。改为 <code>column-reverse</code> ，起始线和终止线交换。</p><p>下面的例子中，<code>flex-direction</code> 值为 <code>row-reverse</code>。尝试使用其他的值 <code>row</code> ，<code>column</code>，<code>column-reverse</code>，看看内容会发生什么改变。</p><iframe width="100%" height="350" src="https://mdn.github.io/css-examples/flexbox/basics/flex-direction.html" loading="lazy" style="box-sizing:content-box;border:1px solid var(--border-primary);max-width:100%;width:calc((100% - 2rem) - 2px);background:rgb(255, 255, 255);border-radius:var(--elem-radius);padding:1rem;color:rgb(255, 255, 255);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"></iframe><h2 id="用-flex-wrap-实现多行-flex-容器" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#%E7%94%A8_flex-wrap_%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C_flex_%E5%AE%B9%E5%99%A8" target="_blank" rel="noreferrer">用 flex-wrap 实现多行 Flex 容器</a> <a class="header-anchor" href="#用-flex-wrap-实现多行-flex-容器" aria-label="Permalink to &quot;[用 flex-wrap 实现多行 Flex 容器](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#用_flex-wrap_实现多行_flex_容器)&quot;">​</a></h2><p>虽然<code>flexbox</code>是一维模型，但可以使我们的<code>flex</code>项目应用到多行中。在这样做的时候，您应该把每一行看作一个新的<code>flex</code>容器。任何空间分布都将在该行上发生，而不影响该空间分布的其他行。</p><p>为了实现多行效果，请为属性<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap" target="_blank" rel="noreferrer"><code>flex-wrap</code></a>添加一个属性值<code>wrap</code>。现在，如果您的项目太大而无法全部显示在一行中，则会换行显示。下面的实时例子包含已给出宽度的项目，对于<code>flex</code>容器，项目的子元素总宽度大于容器最大宽度。由于<code>flex-wrap</code>的值设置为<code>wrap</code>，所以项目的子元素换行显示。若将其设置为<code>nowrap</code>，这也是初始值，它们将会缩小以适应容器，因为它们使用的是允许缩小的初始<code>Flexbox</code>值。如果项目的子元素无法缩小，使用<code>nowrap</code>会导致溢出，或者缩小程度还不够小。</p><iframe width="100%" height="400" src="https://mdn.github.io/css-examples/flexbox/basics/flex-wrap.html" loading="lazy" style="box-sizing:content-box;border:1px solid var(--border-primary);max-width:100%;width:calc((100% - 2rem) - 2px);background:rgb(255, 255, 255);border-radius:var(--elem-radius);padding:1rem;color:rgb(255, 255, 255);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"></iframe><h2 id="简写属性-flex-flow" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#%E7%AE%80%E5%86%99%E5%B1%9E%E6%80%A7_flex-flow" target="_blank" rel="noreferrer">简写属性 flex-flow</a> <a class="header-anchor" href="#简写属性-flex-flow" aria-label="Permalink to &quot;[简写属性 flex-flow](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#简写属性_flex-flow)&quot;">​</a></h2><p>你可以将两个属性 <code>flex-direction</code> 和 <code>flex-wrap</code> 组合为简写属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-flow" target="_blank" rel="noreferrer"><code>flex-flow</code></a>。第一个指定的值为 <code>flex-direction</code> ，第二个指定的值为 <code>flex-wrap</code>.</p><p>在下面的例子中，尝试将第一个值修改为 <code>flex-direction</code> 的允许取值之一，即 <code>row</code>, <code>row-reverse</code>, <code>column</code> 或 <code>column-reverse</code>, 并尝试将第二个指定值修改为 <code>wrap</code> 或 <code>nowrap</code>。</p><iframe width="100%" height="400" src="https://mdn.github.io/css-examples/flexbox/basics/flex-flow.html" loading="lazy" style="box-sizing:content-box;border:1px solid var(--border-primary);max-width:100%;width:calc((100% - 2rem) - 2px);background:rgb(255, 255, 255);border-radius:var(--elem-radius);padding:1rem;color:rgb(255, 255, 255);font-family:Inter, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"></iframe><h2 id="flex-元素上的属性" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flex_%E5%85%83%E7%B4%A0%E4%B8%8A%E7%9A%84%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">flex 元素上的属性</a> <a class="header-anchor" href="#flex-元素上的属性" aria-label="Permalink to &quot;[flex 元素上的属性](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flex_元素上的属性)&quot;">​</a></h2><p>为了更好地控制 flex 元素，有三个属性可以作用于它们：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow" target="_blank" rel="noreferrer"><code>flex-grow</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink" target="_blank" rel="noreferrer"><code>flex-shrink</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis" target="_blank" rel="noreferrer"><code>flex-basis</code></a></li></ul><p>本章只会大概介绍一下它们的用法，更详细的细节请参阅其他的文章。</p><p>在考虑这几个属性的作用之前，需要先了解一下 <strong>可用空间</strong> available space 这个概念。这几个 flex 属性的作用其实就是改变了 flex 容器中的可用空间的行为。同时，可用空间对于 flex 元素的对齐行为也是很重要的。</p><p>假设在 1 个 500px 的容器中，我们有 3 个 100px 宽的元素，那么这 3 个元素需要占 300px 的宽，剩下 200px 的可用空间。在默认情况下，flexbox 的行为会把这 200px 的空间留在最后一个元素的后面。</p><p><img src="'+s+'" alt="This flex container has available space after laying out the items."></p><p>如果期望这些元素能自动地扩展去填充满剩下的空间，那么我们需要去控制可用空间在这几个元素间如何分配，这就是元素上的那些 <code>flex</code> 属性要做的事。</p><h3 id="flex-元素属性-flex-basis" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flex_%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7%EF%BC%9Aflex-basis" target="_blank" rel="noreferrer">Flex 元素属性：<code>flex-basis</code></a> <a class="header-anchor" href="#flex-元素属性-flex-basis" aria-label="Permalink to &quot;[Flex 元素属性：`flex-basis`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flex_元素属性：flex-basis)&quot;">​</a></h3><p><code>flex-basis</code> 定义了该元素的<strong>空间大小</strong>（<strong>the size of that item in terms of the space</strong>），flex 容器里除了元素所占的空间以外的富余空间就是<strong>可用空间</strong> available space。该属性的默认值是 <code>auto</code> 。此时，浏览器会检测这个元素是否具有确定的尺寸。在上面的例子中，所有元素都设定了宽度（width）为 100px，所以 <code>flex-basis</code> 的值为 100px。</p><p>如果没有给元素设定尺寸，<code>flex-basis</code> 的值采用元素内容的尺寸。这就解释了：我们给只要给 Flex 元素的父元素声明 <code>display: flex</code> ，所有子元素就会排成一行，且自动分配小大以充分展示元素的内容。</p><h3 id="flex-元素属性-flex-grow" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flex_%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7%EF%BC%9Aflex-grow" target="_blank" rel="noreferrer">Flex 元素属性：<code>flex-grow</code></a> <a class="header-anchor" href="#flex-元素属性-flex-grow" aria-label="Permalink to &quot;[Flex 元素属性：`flex-grow`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox#flex_元素属性：flex-grow)&quot;">​</a></h3><p><code>flex-grow</code> 若被赋值为一个正整数，flex 元素会以 <code>flex-basis</code> 为基础，沿主轴方向增长尺寸。这会使该元素延展，并占据此方向轴上的可用空间（available space）。如果有其他元素也被允许延展，那么他们会各自占据可用空间的一部分。</p><p>如果我们给上例中的所有元素设定 <code>flex-grow</code> 值为 1，容器中的可用空间会被这些元素平分。它们会延展以填满容器主轴方向上的空间。</p><p>flex-grow 属性可以按比例分配空间。如果第一个元素 <code>flex-grow</code> 值为 2，其他元素值为 1，则第一个元素将占有 2/4（上例中，即为 200px 中的 100px）, 另外两个元素各占有 1/4（各 50px）。</p><h1 id="flex-shrink" tabindex="-1">flex-shrink <a class="header-anchor" href="#flex-shrink" aria-label="Permalink to &quot;flex-shrink&quot;">​</a></h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noreferrer">CSS</a> <strong><code>flex-shrink</code></strong> 属性指定了 flex 元素的<u>收缩规则</u>。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。</p>',60),f=[x];function p(b,h,_,m,g,S){return l(),o("div",null,f)}const w=e(d,[["render",p]]);export{C as __pageData,w as default};
