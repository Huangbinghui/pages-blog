import{_ as a,c as s,o as e,a2 as t}from"./chunks/framework.ClDkF6YQ.js";const m=JSON.parse('{"title":"架构","description":"","frontmatter":{},"headers":[],"relativePath":"articles/CS/pg/系统概述.md","filePath":"articles/CS/pg/系统概述.md"}'),i={name:"articles/CS/pg/系统概述.md"},p=t(`<h1 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h1><h2 id="进程架构" tabindex="-1">进程架构 <a class="header-anchor" href="#进程架构" aria-label="Permalink to &quot;进程架构&quot;">​</a></h2><h3 id="postmaster进程" tabindex="-1">Postmaster进程 <a class="header-anchor" href="#postmaster进程" aria-label="Permalink to &quot;Postmaster进程&quot;">​</a></h3><p>主进程Postmaster是整个数据库实例的总控制进程，负责启动和关闭数据库实例。用户可以运行<code>postmaster</code>或<code>postgres</code>命令加上合适的参数启动数据库。实际上，<code>postmaster</code>命令是一个指向<code>postgres</code>的链接，如下图所示。</p><p>更多时候我们使用<code>pg_ctl</code>启动数据库，<code>pg_ctl</code>也是通过运行<code>postgres</code>来启动数据库，它只是做了一些包装，让我们更容易启动数据库，所以，主进程Postmaster实际是第一个postgres进程，此进程会fork一些与数据库实例相关的辅助子进程，并管理他们。</p><p>当用户与PostgreSQL数据库建立连接时，</p><ol><li>先与Postmaster进程建立连接。此时，客户端程序会发出身份证验证的消息给Postmaster进程，Postmaster主进程根据消息中的信息进行客户端身份验证。</li><li>如果验证通过，它会fork一个子进程postgres为这个连接服务，fork出来的进程被称为服务进程，查询pg_stat_activity表可以看到的pid，就是这些服务进程的pid。</li></ol><h3 id="syslogger进程" tabindex="-1">SysLogger进程 <a class="header-anchor" href="#syslogger进程" aria-label="Permalink to &quot;SysLogger进程&quot;">​</a></h3><p>在postgresql.conf里启用 运行日志（pg_log）后，会有SysLogger进程。</p><h3 id="bgwriter后台写进程" tabindex="-1">BgWriter后台写进程 <a class="header-anchor" href="#bgwriter后台写进程" aria-label="Permalink to &quot;BgWriter后台写进程&quot;">​</a></h3><p>BgWriter是PostgreSQL中在后台将脏页写出到磁盘的辅助进程，引入该进程主要为达到如下两个目的：</p><ol><li>数据库在进行查询处理时若发现要读取的数据不在缓冲区中时要先从磁盘中读入要读取的数据所在的页面，此时如果缓冲区已满，则需要先选择部分缓冲区中的页面替换出去。如果被替换的页面没有被修改过，那么可以直接丢弃；但如果要被替换的页已被修改，则必需先将这页写出到磁盘中后才能替换，这样数据库的查询处理就会被阻塞。通过使用BgWriter定期写出缓冲区中的部分脏页到磁盘中，为缓冲区腾出空间，就可以降低查询处理被阻塞的可能性。</li><li>PostgreSQL在定期作检查点时需要把所有脏页写出到磁盘，通过BgWriter预先写出一些脏页，可以减少设置检查点时要进行的IO操作，使系统的IO负载趋向平稳。通过BgWriter对共享缓冲区写操作的统一管理，避免了其他服务进程在需要读入新的页面到共享缓冲区时，不得不将之前修改过的页面写出到磁盘的操作。</li></ol><h3 id="walwriter预写日志写进程" tabindex="-1">WalWriter预写日志写进程 <a class="header-anchor" href="#walwriter预写日志写进程" aria-label="Permalink to &quot;WalWriter预写日志写进程&quot;">​</a></h3><p>该进程用于保存WAL预写日志。预写式日志WAL（Write Ahead Log，也称为Xlog）的中心思想是对数据文件的修改必须是只能发生在这些修改已经记录到日志之后，也就是先写日志后写数据。</p><h3 id="pgarch归档进程" tabindex="-1">PgArch归档进程 <a class="header-anchor" href="#pgarch归档进程" aria-label="Permalink to &quot;PgArch归档进程&quot;">​</a></h3><p>PgArch辅助进程的目标就是对WAL日志在磁盘上的存储形式进行归档备份。但在默认情况下，PostgreSQL是非归档模式，因此看不到PgArch进程。</p><p>从PostgreSQL 8.x开始，有了PITR（Point-In-Time-Recovery）技术，该技术支持将数据库恢复到其运行历史中任意一个有记录的时间点；PITR的另一个重要的基础就是对WAL文件的归档功能。</p><p>PgArch进程通过postgresql.conf文件中的如下参数进行配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># - Archiving -</span></span>
<span class="line"><span>#archive_mode = off             # enables archiving; off, on, or always</span></span>
<span class="line"><span>                                # (change requires restart)</span></span>
<span class="line"><span>#archive_command = &#39;&#39;           # command to use to archive a logfile segment</span></span>
<span class="line"><span>                                # placeholders: %p = path of file to archive</span></span>
<span class="line"><span>                                #               %f = file name only</span></span>
<span class="line"><span>                                # e.g. &#39;test ! -f /mnt/server/archivedir/%f &amp;&amp; cp %p /mnt/server/archivedir/%f&#39;</span></span>
<span class="line"><span>#archive_timeout = 0            # force a logfile segment switch after this</span></span>
<span class="line"><span>                                # number of seconds; 0 disables</span></span></code></pre></div><h3 id="autovacuum自动清理进程" tabindex="-1">AutoVacuum自动清理进程 <a class="header-anchor" href="#autovacuum自动清理进程" aria-label="Permalink to &quot;AutoVacuum自动清理进程&quot;">​</a></h3><p>在PG数据库中，对数据进行UPDATE或者DELETE操作后，数据库不会立即删除旧版本的数据，而是标记为删除状态。这是因为PG数据库具有多版本的机制，如果这些旧版本的数据正在被另外的事务打开，那么暂时保留他们是很有必要的。当事务提交后，旧版本的数据已经没有价值了，数据库需要清理垃圾数据腾出空间，而清理工作就是AutoVacuum进程进行的。</p><h3 id="pgstat统计信息收集进程" tabindex="-1">PgStat统计信息收集进程 <a class="header-anchor" href="#pgstat统计信息收集进程" aria-label="Permalink to &quot;PgStat统计信息收集进程&quot;">​</a></h3><p>PgStat进程是PostgreSQL数据库的统计信息收集器，用来收集数据库运行期间的统计信息，如表的增删改次数，数据块的个数，索引的变化等等。收集统计信息主要是为了让优化器做出正确的判断，选择最佳的执行计划。</p><h3 id="checkpoint检查点进程" tabindex="-1">CheckPoint检查点进程 <a class="header-anchor" href="#checkpoint检查点进程" aria-label="Permalink to &quot;CheckPoint检查点进程&quot;">​</a></h3><p>检查点是系统设置的事务序列点，设置检查点保证检查点前的日志信息刷到磁盘中。</p><h2 id="逻辑架构" tabindex="-1">逻辑架构 <a class="header-anchor" href="#逻辑架构" aria-label="Permalink to &quot;逻辑架构&quot;">​</a></h2><p>默认端口5432，默认数据库postgres，默认schema：public。</p><h2 id="pg-data目录结构" tabindex="-1">pg_data目录结构 <a class="header-anchor" href="#pg-data目录结构" aria-label="Permalink to &quot;pg_data目录结构&quot;">​</a></h2><p><code>base</code> 每个数据库对于的子目录的子目录</p><p><code>global</code> 包含集簇范围的表的文件和全局控制信息等。</p><p><code>pg_commit_ts</code> 包含事务提交时间戳数据的子目录</p><p><code>pg_dynshmem</code> 包含被动态共享内存子系统所使用文件的子目录</p><p><code>pg_logical</code> 包含用于逻辑复制的状态数据的子目录</p><p><code>pg_multixact</code> 包含多事务状态数据的子目录（用户共享的行锁）</p><p><code>pg_notify</code> 包含LISTEN/NOTIFY状态数据的子目录</p><p><code>pg_repslot</code> 包含复制槽数据的子目录</p><p><code>pg_serial</code> 包含已提交的可序列化事务信息的子目录</p><p><code>pg_snapshots</code> 包含快照的子目录</p><p><code>pg_stat</code> 包含用于统计子系统的永久文件的子目录</p><p><code>pg_stat_tmp</code> 包含用于统计信息子系统临时文件的子目录</p><p><code>pg_subtrans</code> 包含子事务状态数据的子目录</p><p><code>pg_tblspc</code> 包含指向表空间的符号链接的子目录</p><p><code>pg_twophase</code> 用于预备事务状态文件的子目录</p><p><code>pg_wal</code> 保存预写日志</p><p><code>pg_xact</code> 包含事务提交状态数据的子目录, 记录事务提交状态数据</p><p><code>postgresql.conf</code> 参数文件</p><p><code>pg_hba.conf</code> 客户端认证控制文件(host-based access control )</p><p><code>postgresql.auto.conf</code> 参数文件，只保存alter system命令修改的参数</p><p><code>postmaster.opts</code> 记录服务器最后一次启动时使用的命令行参数</p><p><code>postmaster.pid</code> 记录进程的信息</p><p><code>pg_version</code> pg数据库主版本号文件</p><h2 id="bin目录结构" tabindex="-1">bin目录结构 <a class="header-anchor" href="#bin目录结构" aria-label="Permalink to &quot;bin目录结构&quot;">​</a></h2><p>clusterdb createdb — <a href="http://www.postgres.cn/docs/12/app-createdb.html" target="_blank" rel="noreferrer">创建一个新的PostgreSQL数据库</a> createuser — <a href="http://www.postgres.cn/docs/12/app-createuser.html" target="_blank" rel="noreferrer">定义一个新的PostgreSQL用户账户</a> dropdb — <a href="http://www.postgres.cn/docs/12/app-dropdb.html" target="_blank" rel="noreferrer">移除一个PostgreSQL数据库</a> dropuser — <a href="http://www.postgres.cn/docs/12/app-dropuser.html" target="_blank" rel="noreferrer">移除一个PostgreSQL用户账户</a></p><p>initdb — <a href="http://www.postgres.cn/docs/12/app-initdb.html" target="_blank" rel="noreferrer">创建一个新的PostgreSQL数据库集</a></p><p>oid2name pg_amcheck pg_archivecleanup pg_basebackup — <a href="http://www.postgres.cn/docs/12/app-pgbasebackup.html" target="_blank" rel="noreferrer">获得一个PostgreSQL集簇的一个基础备份</a> pgbench pg_checksums pg_config pg_controldata pg_ctl — <a href="http://www.postgres.cn/docs/12/app-pg-ctl.html" target="_blank" rel="noreferrer">初始化、启动、停止或控制一个PostgreSQL服务器</a> pg_dump — <a href="http://www.postgres.cn/docs/12/app-pgdump.html" target="_blank" rel="noreferrer">把PostgreSQL数据库抽取为一个脚本文件或其他归档文件</a> pg_dumpall — <a href="http://www.postgres.cn/docs/12/app-pg-dumpall.html" target="_blank" rel="noreferrer">将一个PostgreSQL数据库集簇抽取到一个脚本文件中</a> pg_isready pg_receivewal pg_recvlogical pg_resetwal pg_restore — <a href="http://www.postgres.cn/docs/12/app-pgrestore.html" target="_blank" rel="noreferrer">从一个由pg_dump创建的归档文件恢复一个PostgreSQL数据库</a> pg_rewind pg_test_fsync pg_test_timing pg_upgrade pg_verifybackup pg_waldump — <a href="http://www.postgres.cn/docs/12/pgwaldump.html" target="_blank" rel="noreferrer">以人类可读的形式显示一个PostgreSQL 数据库集簇的预写式日志</a> postgres — <a href="http://www.postgres.cn/docs/12/app-postgres.html" target="_blank" rel="noreferrer">PostgreSQL数据库服务器</a> postmaster -&gt; postgres - <a href="http://www.postgres.cn/docs/12/app-postgres.html" target="_blank" rel="noreferrer"><code>postmaster</code>是<code>postgres</code>的一个废弃的别名。</a> psql — <a href="http://www.postgres.cn/docs/12/app-psql.html" target="_blank" rel="noreferrer">PostgreSQL的交互式终端</a> reindexdb vacuumdb vacuumlo</p><h1 id="启动数据库" tabindex="-1">启动数据库 <a class="header-anchor" href="#启动数据库" aria-label="Permalink to &quot;启动数据库&quot;">​</a></h1><h2 id="初始化数据库" tabindex="-1">初始化数据库 <a class="header-anchor" href="#初始化数据库" aria-label="Permalink to &quot;初始化数据库&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/michael.yw/pgdata</span></span></code></pre></div><h2 id="启动、停止" tabindex="-1">启动、停止 <a class="header-anchor" href="#启动、停止" aria-label="Permalink to &quot;启动、停止&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pg_ctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/michael.yw/pgdata</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/michael.yw/pgdata/logfile1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pg_ctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/michael.yw/pgdata</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/michael.yw/pgdata/logfile1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span></code></pre></div><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/michael.yw/pgdata/postgresql.conf</span></span></code></pre></div><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6688</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">psql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6688</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pg_config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pg_ctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pg_dump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pg_dump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6688</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgres</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> t1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> t1.sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> t1.sql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pg_controldata</span></span></code></pre></div>`,64),r=[p];function l(n,o,h,c,d,g){return e(),s("div",null,r)}const u=a(i,[["render",l]]);export{m as __pageData,u as default};
