import{_ as t,c as e,o as l,a2 as d}from"./chunks/framework.ClDkF6YQ.js";const h=JSON.parse('{"title":"过滤表达式","description":"","frontmatter":{},"headers":[],"relativePath":"articles/tool/wireshark.md","filePath":"articles/tool/wireshark.md"}'),a={name:"articles/tool/wireshark.md"},n=d('<h1 id="过滤表达式" tabindex="-1">过滤表达式 <a class="header-anchor" href="#过滤表达式" aria-label="Permalink to &quot;过滤表达式&quot;">​</a></h1><h2 id="比较值" tabindex="-1">比较值 <a class="header-anchor" href="#比较值" aria-label="Permalink to &quot;比较值&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">English</th><th style="text-align:left;">Alias</th><th style="text-align:left;">C-like</th><th style="text-align:left;">描述</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">eq</td><td style="text-align:left;">any_eq</td><td style="text-align:left;">==</td><td style="text-align:left;">相等 (any if more than one)</td><td style="text-align:left;"><code>ip.src == 10.0.0.5</code></td></tr><tr><td style="text-align:left;">ne</td><td style="text-align:left;">all_ne</td><td style="text-align:left;">!=</td><td style="text-align:left;">不等 (all if more than one)</td><td style="text-align:left;"><code>ip.src != 10.0.0.5</code></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">all_eq</td><td style="text-align:left;">===</td><td style="text-align:left;">相等 (all if more than one)</td><td style="text-align:left;"><code>ip.src === 10.0.0.5</code></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">any_ne</td><td style="text-align:left;">!==</td><td style="text-align:left;">不等(any if more than one)</td><td style="text-align:left;"><code>ip.src !== 10.0.0.5</code></td></tr><tr><td style="text-align:left;">gt</td><td style="text-align:left;"></td><td style="text-align:left;">&gt;</td><td style="text-align:left;">大于</td><td style="text-align:left;"><code>frame.len &gt; 10</code></td></tr><tr><td style="text-align:left;">lt</td><td style="text-align:left;"></td><td style="text-align:left;">&lt;</td><td style="text-align:left;">小于</td><td style="text-align:left;"><code>frame.len &lt; 128</code></td></tr><tr><td style="text-align:left;">ge</td><td style="text-align:left;"></td><td style="text-align:left;">&gt;=</td><td style="text-align:left;">大于等于</td><td style="text-align:left;"><code>frame.len ge 0x100</code></td></tr><tr><td style="text-align:left;">le</td><td style="text-align:left;"></td><td style="text-align:left;">&lt;=</td><td style="text-align:left;">小于等于</td><td style="text-align:left;"><code>frame.len &lt;= 0x20</code></td></tr><tr><td style="text-align:left;">contains</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">协议, 字段 或 切片包含一个值</td><td style="text-align:left;"><code>sip.To contains &quot;a1762&quot;</code></td></tr><tr><td style="text-align:left;">matches</td><td style="text-align:left;"></td><td style="text-align:left;">~</td><td style="text-align:left;">协议或文本字段匹配 一个正则表达式</td><td style="text-align:left;">`http.host matches &quot;acme\\.(org</td></tr></tbody></table><h2 id="逻辑表达式" tabindex="-1">逻辑表达式 <a class="header-anchor" href="#逻辑表达式" aria-label="Permalink to &quot;逻辑表达式&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">English</th><th style="text-align:left;">C-like</th><th style="text-align:left;">描述</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">and</td><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">逻辑且</td><td style="text-align:left;"><code>ip.src==10.0.0.5 and tcp.flags.fin</code></td></tr><tr><td style="text-align:left;">or</td><td style="text-align:left;">||</td><td style="text-align:left;">逻辑或</td><td style="text-align:left;"><code>ip.src==10.0.0.5 or ip.src==192.1.1.1</code></td></tr><tr><td style="text-align:left;">xor</td><td style="text-align:left;">^^</td><td style="text-align:left;">逻辑异或</td><td style="text-align:left;"><code>tr.dst[0:3] == 0.6.29 xor tr.src[0:3] == 0.6.29</code></td></tr><tr><td style="text-align:left;">not</td><td style="text-align:left;">!</td><td style="text-align:left;">逻辑非</td><td style="text-align:left;"><code>not llc</code></td></tr><tr><td style="text-align:left;">[…]</td><td style="text-align:left;"></td><td style="text-align:left;">子序列</td><td style="text-align:left;">See “Slice Operator” below.</td></tr><tr><td style="text-align:left;">in</td><td style="text-align:left;"></td><td style="text-align:left;">集合成员关系</td><td style="text-align:left;">http.request.method in {&quot;HEAD&quot;, &quot;GET&quot;}. See “Membership Operator” below.</td></tr></tbody></table>',5),i=[n];function s(r,f,o,x,g,y){return l(),e("div",null,i)}const _=t(a,[["render",s]]);export{h as __pageData,_ as default};
