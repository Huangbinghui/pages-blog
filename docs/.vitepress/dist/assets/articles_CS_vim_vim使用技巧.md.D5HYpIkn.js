import{_ as a,c as t,o as s,a2 as e}from"./chunks/framework.ClDkF6YQ.js";const m=JSON.parse('{"title":"高效文本编辑的七个习惯","description":"","frontmatter":{},"headers":[],"relativePath":"articles/CS/vim/vim使用技巧.md","filePath":"articles/CS/vim/vim使用技巧.md"}'),n={name:"articles/CS/vim/vim使用技巧.md"},o=e(`<h1 id="高效文本编辑的七个习惯" tabindex="-1">高效文本编辑的七个习惯 <a class="header-anchor" href="#高效文本编辑的七个习惯" aria-label="Permalink to &quot;高效文本编辑的七个习惯&quot;">​</a></h1><h2 id="编辑一个文件" tabindex="-1">编辑一个文件 <a class="header-anchor" href="#编辑一个文件" aria-label="Permalink to &quot;编辑一个文件&quot;">​</a></h2><h3 id="好习惯一-快速移动" tabindex="-1">好习惯一：快速移动 <a class="header-anchor" href="#好习惯一-快速移动" aria-label="Permalink to &quot;好习惯一：快速移动&quot;">​</a></h3><p>你可以简单地使用 <code>/pattern</code>来找到那段文字，但是 我们有更好的办法：</p><ul><li>如果你看到一个特定的单词，你想搜索该单词出现的其他位置，你可以 使用<code> *</code> 命令。<u>该命令会使用当前光标下的单词去搜索下一个。</u></li><li>如果你设上<strong>incserach</strong>这个选项，Vim会在你输入匹配模式的 同时，显示该模式第一个匹配的地方。这能帮你快速发现你输入的搜索 模式中的错误。</li><li>如果你设上<strong>hlsearch</strong> 这个选项，Vim会把你的模式匹配上的 地方都用黄色的背景色高亮显示出来。这使你能对搜索命令会让你跳到哪儿 一目了然。在程序代码里用这个功能可以帮助你发现一个变量在哪里被使用 了。你甚至不需要移动你的光标就可以发现哪里有你要找的东西。</li></ul><p>在结构化的文本中你能更方便的快速移动。针对C语言（以及类似的如C++和 Java），Vim有特定的命令：</p><ul><li>使用 <strong>%</strong> 从一个开括弧跳转到与它对应的闭括弧。或者从一个 “#if”跳转到对应的“#endif”。事实上， <strong>%</strong> 可以跳转到很多不同的 互相匹配的东西上。这对检查（）和{}是否正确的嵌套非常有用。</li><li>使用 <strong>［{</strong> 来跳回到当前代码区块的“{”处</li><li>使用 <strong>gd</strong> 来从一个本地变量被使用的地方跳转到它被声明的地 方。</li></ul><p>当然了，还有很多这样的命令。我们的重点不是说你必须知道这些命令。你可能会抗议说你不可能学会所有这么多的命令—总共得有几百条不同的移动的命令， 有些很简单，有些很费脑子—不花上几个礼拜的时间训练想把它们全记住是不可能的。可是，你用不着也不应该那么做；相反，你应该意识到属于你一个人的编辑方式是怎样的，进而只学习那些会使你的编辑工作更高效的命令。</p><p>这里有 <strong>三个基本步骤</strong> ：</p><ol><li>当你在编辑时，<u>特别注意一下那些你经常重复以及/或者要花很多时间的操作</u>。</li><li><u>寻找是否有一条编辑器命令能帮你更快执行这个操作</u>。读文档、问朋友、或者就是去“偷看”一下别人是怎么做的。</li><li><u>对这条命令进行训练</u>。不停地练习直到你的手指能不通过脑子就把它输入进去。</li></ol><h3 id="好习惯二-别输入两次" tabindex="-1">好习惯二：别输入两次 <a class="header-anchor" href="#好习惯二-别输入两次" aria-label="Permalink to &quot;好习惯二：别输入两次&quot;">​</a></h3><p>我们会输入的单词是一个有限的集合。甚至短语和句子也是有限的。尤其是对计算机程序来说。显然，你不希望把同一件事输入两次。</p><p>你经常会需要把一个单词换成另一个。如果是在整个文件中要作这个操作，你可以使用 <strong>😒</strong> （substitute，替换）命令。如果只有几个地方需要替换，一 个快速的方法是使用 ***** 命令找到该单词下一个出现的地方，使用 <strong>cw</strong> 来替换这个单词。接着打 <strong>n</strong> 找到下一个地方，打 <strong>.</strong> （dot，点）来重复上一条 <strong>cw</strong> 替换命令。</p><p><u><code>*</code>这个命令会重复上一个改动</u>。这里所说的一个改动，意思就是插入、 删除或替换文本。能够重复这个是一种很强的机制。如果你围绕这个来组织你的 编辑工作的话，很多工作变成只要打一个 <strong>.</strong> 键就好了。注意在两次使用 重复命令之间的编辑操作，因为这有可能改掉你想重复的操作。在这种情况下你 可以打个 <strong>m</strong> 来记录来这个位置，重复你的改动，最后再回到你记下的那 个书签位置做你想做的编辑。</p><p>一些函数或变量名可能很不好输入。比如“XpmCreatePixmapFromData”，你能快速 的不查声明不犯错的输入它吗？Vim有一个补齐机制能让这种操作变得容易很多。 它会在你当前编辑的文件以及你 <code>#include</code> 的头文件里检索单词。你可以只输入 “XpmCr”，然后按 <strong>CTRL-N</strong> ，Vim会帮你把它展开成 “XpmCreatePixmapFromData”。这不仅省下很多键盘输入，还可以避免打错字而不 得不在编译器输出出错信息的时候再回头来修改。</p><p>当你在多次打一个短语或者句子的时候，我们有甚至更快的办法。Vim有一个录制宏的机制。你打 <strong>qa</strong> 来往‘a’寄存器中录制一个宏。然后就像平时一样开 始输入你的命令，最后打 <strong>q</strong> 命令来停止宏记录。当你想重复你记录下来 的那些操作命令的时候，你就打 <strong>@a</strong> 。一共有26个寄存器可供你记录。</p><p>使用宏记录你可以重复许多不同的操作，不仅仅是插入文本。下次当你需要重复 一些操作的时候希望你能想到宏命令。</p><p>在使用宏命令时要特别注意的一件事是，当你重放这个宏的时候，你记录的命令 会被原封不动地重复出来。所以当你移动的时候你必须记住你跳过的那些文本可能与你重放这个宏时跳过的文本不同。向左移4个字符可能在你记录宏的时候完成 你想要的修改，但是当你重放的时候可能需要移5个字符。我们经常需要使用针对文 本对象（单词，句子等）进行移动的命令，或移动到特定的字符上。</p><p>当你需要重放的命令变得越来越复杂的时候，想把它们一次就打好也会变得越来 越困难。这时候你应该放弃用录制宏的方法，而是去写一个脚本或宏。这对针对 你部分代码写一个模板非常有用；比如，一个函数的头。这些你想要有多灵活你 自己就可以做得多灵活。</p><h3 id="好习惯三-有错就改" tabindex="-1">好习惯三：有错就改 <a class="header-anchor" href="#好习惯三-有错就改" aria-label="Permalink to &quot;好习惯三：有错就改&quot;">​</a></h3><p>在打字时打错是正常的。没有人能避免。技巧在于快速地发现并纠正它们。编辑器应该能在这点上帮助你。但是你得自己告诉它什么是错的什么是对的。</p><p>经常你会一次又一次地犯同样一个错误。你的手指就是不听你的使唤。这时候缩写就派上用场了。几个小例子：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:abbr Lunix Linux</span></span>
<span class="line"><span>:abbr accross across</span></span>
<span class="line"><span>:abbr hte the</span></span></code></pre></div><p>Vim会自动地当你打错这些单词帮你纠正回来。</p><p>同样的机制还可以用来通过少少的几个字符输入一个长长的单词。对那些你发现 很难输入的单词尤其有用，同时这也可以防止你打错。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:abbr pn pinguin</span></span>
<span class="line"><span>:abbr MS Mandrake Software</span></span></code></pre></div><p>但是，这些在当你不希望它们自动展开的时候给你带来麻烦，你在你的文本里就 很难输入“MS”了。所以最好用那些自身没有意义的短短的组合。</p><p>为了更好的在你的文本中找到错误，Vim有一套漂亮的高亮机制。这个本来是用来 对程度语言作基于语法的高亮显示的，但是它也可以帮你找到并高亮出错误来。</p><p>语法高亮会用特定的颜色显示程序中的注释。这听起来不像是一个很有用的特性。 但是一旦你开始使用它，你会发现它很有帮助。你能很快地发现本来应该是注释 的文本可是却没有按照注释来高亮（可能因为你忘了加一个注释标记）。或者看 见一行代码却被像注释一样高亮了（可能因为你忘了“*/”）。这些错误在一个 B&amp;W(Black &amp; White，黑白)文件里很难发现并且会浪费掉你很多时间去纠错。</p><p>语法高亮还能帮助你找到各种括弧的不匹配错误。一个没有被匹配的“）”会被用 亮红色的背景高亮出来。你可以用 <strong>%</strong> 命令去看它们是怎么匹配的，然后在正 确的位置插入一个“（”或者“）”。</p><p>其他的一些常见错误也能很快被发现，比如 <code>#included &lt;stdio.h&gt;</code> 而不是 <code>#include &lt;stdio.h&gt;</code> 。在黑白显示的编辑器里你会很难发现这个错误，但是 在Vim里很快就会发现“include”是高亮的，而“included”则不会被高亮。</p><p>一个更复杂点的例子：在英语文本中我们可以有一个所有正确单词的列表。任何不在这个列表里的单词都是一个错误。通过一个语法文件你可以把任何不在列表 里的单词高亮出来。通过一些额外的宏你可以往这个单词列表里加入新的单词， 之后它们就不会被标记为错误。这个工作起来就像你在文本处理软件里所期望的那样。在Vim里这个是用脚本实现的，你可以进一步调整它以适合你自己的习惯：比如，你可以只检查你的程序注释里的单词拼写错误。</p><h2 id="编辑多个文件" tabindex="-1">编辑多个文件 <a class="header-anchor" href="#编辑多个文件" aria-label="Permalink to &quot;编辑多个文件&quot;">​</a></h2><h3 id="好习惯四-学会处理多个文件" tabindex="-1">好习惯四：学会处理多个文件 <a class="header-anchor" href="#好习惯四-学会处理多个文件" aria-label="Permalink to &quot;好习惯四：学会处理多个文件&quot;">​</a></h3><p>人们不会只跟一个文件打交道。通常会有许多相关文件，而你一个接一个的编辑它们，或者甚至同时编辑好几个。你应该能够用好你的编辑器使同时处理多个文件变得更高效。</p><p>之前提到的标签机制也可以用在文件之间的跳转上。通常的做法是对你当前工作 的整个项目创建一个标签文件。你可以在整个项目的所有文件之间跳转去查找函 数的定义、结构定义、typedef等等。跟你自己手工查找比起来这会给你节约N多 的时间；当我浏览一个程序代码时我做的第一件事就是创建一个标签文件。</p><p>另一个强劲的机制是查找一个名字在一组文件中出现的所有地方：使用 <strong>:grep</strong> 命令。Vim生成一个匹配的列表，然后跳转到第一个匹配之处。 <strong>:cn</strong> 命令把你带转到下一个匹配上。比如当你需要改变一个函数调用的参数数目的时候会非常有用。</p><p>头文件中会包含很有用的信息。可是要找到包含了你想看的声明的那个头文件并非易事。Vim知道头文件，可以帮你搜索它们你要查找的单词。最常见的操作是查找一个函数的原型。把光标移到你的函数上并打 <strong>[I</strong> 命令：Vim会显示所 有头文件中与这个函数匹配的地方。如果你想看到更多的上下文，你可以直接跳转到这个函数的声明上。一个类似的命令可以帮你检查你是不是包含了正确的头文件。</p><p>在Vim中你可以把文本区域分割成几个“窗口”，在不同的窗口里编辑不同的文件。 之后你可以比对两个或多个文件之间的差异，在它们之前拷贝/粘贴文本。有很 多命令可以：打开或者关闭窗口，在窗口之间跳转，暂时隐藏一个文件，等等。 同样的你需要使用那三个基本步骤来选择你自己需要学会的那一组命令。</p><p>多窗口编辑还有很多其他的用处。标签预览机制是一个很好的例子。它会打开一个特殊的预览窗口，同时光标还留在你当前正在编辑的文件窗口里。预览窗口里的文本会显示，比如，当前光标下的函数名字的声明。如果你移动光标到另一个名字上并在那停留一秒钟，预览窗口里会显示那个名字的声明或者定义。这个名 字可以是在你项目头文件里声明的结构或者函数的名字。</p>`,40),i=[o];function r(p,l,c,d,h,g){return s(),t("div",null,i)}const b=a(n,[["render",r]]);export{m as __pageData,b as default};
