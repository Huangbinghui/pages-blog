import{_ as t,c as e,o as a,a2 as s}from"./chunks/framework.ClDkF6YQ.js";const _=JSON.parse('{"title":"gawk程序","description":"","frontmatter":{},"headers":[],"relativePath":"articles/CS/Linux/文本处理/初级gawk.md","filePath":"articles/CS/Linux/文本处理/初级gawk.md"}'),i={name:"articles/CS/Linux/文本处理/初级gawk.md"},l=s('<h1 id="gawk程序" tabindex="-1">gawk程序 <a class="header-anchor" href="#gawk程序" aria-label="Permalink to &quot;gawk程序&quot;">​</a></h1><p>在gawk编程语言中，你可以做下面的事情：</p><ul><li>定义变量来保存数据；</li><li>使用算术和字符串操作符来处理数据；</li><li>使用结构化编程概念（比如if-then语句和循环）来为数据处理增加处理逻辑；</li><li>通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告。</li></ul><h2 id="命令格式" tabindex="-1">命令格式 <a class="header-anchor" href="#命令格式" aria-label="Permalink to &quot;命令格式&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gawk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [file]</span></span></code></pre></div><p>gawk选项(options):</p><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">-F fs</td><td style="text-align:center;">指定行中划分数据字段的字段<strong>分隔符</strong></td></tr><tr><td style="text-align:center;">-f file</td><td style="text-align:center;">从<strong>指定文件读取程序</strong></td></tr><tr><td style="text-align:center;">-v var=value</td><td style="text-align:center;">定义gawk程序中的一个<strong>变量</strong>及其默认值</td></tr><tr><td style="text-align:center;">-mf N</td><td style="text-align:center;">指定要处理的数据文件中的<strong>最大字段数</strong></td></tr><tr><td style="text-align:center;">-mr N</td><td style="text-align:center;">指定数据文件中的<strong>最大数据行数</strong></td></tr><tr><td style="text-align:center;">-W keyword</td><td style="text-align:center;">指定gawk的兼容模式或<strong>警告等级</strong></td></tr></tbody></table><p>从命令行读取程序脚本：</p><p>gawk程序脚本用一对花括号来定义。你必须将<strong>脚本命令放到花括号<code>{}</code>中</strong>。</p><p>由于gawk命令行假定脚本是单个文本字符串，你还<strong>必须将脚本放到单引号中</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gawk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{print &quot;Hello World!&quot;}&#39;</span></span></code></pre></div><p><code>print</code>会将文本打印到STDOUT。这个程序什么都不会发生。原因在于没有在命令行上指定文件名，所以gawk程序会从STDIN接收数据。在运行这个程序时，它会一直等待从STDIN输入的文本。如果你输入一行文本并按下回车键，gawk会对这行文本运行一遍程序脚本。</p>',12),n=[l];function r(o,d,g,c,p,h){return a(),e("div",null,n)}const u=t(i,[["render",r]]);export{_ as __pageData,u as default};
