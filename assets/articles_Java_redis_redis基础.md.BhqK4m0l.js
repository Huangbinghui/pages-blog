import{_ as t,c as d,o as e,a2 as a}from"./chunks/framework.ClDkF6YQ.js";const b=JSON.parse('{"title":"启动&连接","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Java/redis/redis基础.md","filePath":"articles/Java/redis/redis基础.md"}'),r={name:"articles/Java/redis/redis基础.md"},s=a(`<h1 id="启动-连接" tabindex="-1">启动&amp;连接 <a class="header-anchor" href="#启动-连接" aria-label="Permalink to &quot;启动&amp;连接&quot;">​</a></h1><p>启动</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-server</span></span></code></pre></div><p>连接</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6379</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 密码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [username] password</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 切换到1号库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span></code></pre></div><h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p>redis是一个key-value数据库，key一般是字符串，value的类型可以有：</p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted Set</li><li>geo</li><li>bitmap</li><li>hyperlog</li></ul><p>前5种为基本类型。</p><h1 id="通用命令" tabindex="-1">通用命令 <a class="header-anchor" href="#通用命令" aria-label="Permalink to &quot;通用命令&quot;">​</a></h1><p>官网：<a href="https://redis.io/commands/" target="_blank" rel="noreferrer">https://redis.io/commands/</a></p><p>命令行：<code>help @group</code></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>keys</td><td>列举匹配到的keys，不建议生产使用</td></tr><tr><td>del</td><td>删除一个或多个key</td></tr><tr><td>mset</td><td>批量设置key-value</td></tr><tr><td>exists</td><td>判断key是否存在</td></tr><tr><td>expire</td><td>给一个key设置有效期</td></tr><tr><td>ttl</td><td>查看一个key的剩余有效期（秒）</td></tr><tr><td>pttl</td><td>查看一个key的剩余有效期（毫秒）</td></tr></tbody></table><h1 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h1><p>可以分为三种类型：</p><ul><li>string：普通字符串</li><li>int：整数类型，可做自增自减操作。</li><li>float：浮点类型，可做自增自减操作。</li></ul><p>存储时，string转化成字节码，int、float转化成二进制</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>set</td><td>设置存储一个值</td></tr><tr><td>get</td><td>获取一个key的值</td></tr><tr><td>mset</td><td>批量设置</td></tr><tr><td>mget</td><td>批量获取</td></tr><tr><td>incr</td><td>自增</td></tr><tr><td>incrby</td><td>自增指定步长</td></tr><tr><td>decr</td><td>自减</td></tr><tr><td>incrbyfloat</td><td>浮点按步长自增</td></tr><tr><td>setnx</td><td>添加一个键值对，前提这个key不存在，否则不执行。</td></tr><tr><td>setex</td><td>添加一个键值对，并指定有效期。</td></tr></tbody></table><p>key用：分隔，在redis图形客户端上可以分组。</p><h1 id="hash" tabindex="-1">Hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;Hash&quot;">​</a></h1><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>HSET key field value</td><td>新增</td></tr><tr><td>HGET key field</td><td>查询</td></tr><tr><td>HMSET</td><td>批量新增多个field value</td></tr><tr><td>HMGET</td><td>批量查询多个field</td></tr><tr><td>HGETALL</td><td>查询key下的所有field</td></tr><tr><td>HKEYS</td><td>获取一个key中的所有field</td></tr><tr><td>HVALS</td><td>获取一个key中的所有value</td></tr><tr><td>HINCRBY</td><td>给一个hash field自增一个步长</td></tr><tr><td>HSETNX</td><td>设置一个key- field- value，如果field存在则不操作</td></tr></tbody></table><h1 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h1><p>与Java的LinkedList类似。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>LPUSH key element ...</td><td>左侧插入一个或多个元素</td></tr><tr><td>LPOP key</td><td>左侧移除一个元素，并返回</td></tr><tr><td>RPUSH key element ...</td><td>右侧插入一个或多个元素</td></tr><tr><td>RPOP key</td><td>右侧移除一个元素，并返回</td></tr><tr><td>LRANGE key start end</td><td>返回start到end范围的元素</td></tr><tr><td>BLPOP/BRPOP</td><td>与LPOP/RPOP类似，只不过在没有元素的时候指定时间，而不是直接返回nil</td></tr></tbody></table><h1 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h1><p>类似Java的HashSet</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SADD key element ...</td><td>向set中添加一个或多个元素</td></tr><tr><td>SREM key element ...</td><td>移除set中一个或多个元素</td></tr><tr><td>SCAND key</td><td>计算set中元素的个数</td></tr><tr><td>SISMEMBER key element</td><td>判断element是不是集合中的元素</td></tr><tr><td>SMEMBERS</td><td>获取集合所有元素</td></tr><tr><td>SINTER key1 key2 ...</td><td>求两个集合交集</td></tr><tr><td>SDIFF key1 key2 ...</td><td>求差集</td></tr><tr><td>SUNION key1 key2 ...</td><td>求并集</td></tr></tbody></table><h1 id="sortedset" tabindex="-1">SortedSet <a class="header-anchor" href="#sortedset" aria-label="Permalink to &quot;SortedSet&quot;">​</a></h1><p>类似Java的TreeSet</p><p>SortedSet中每个元素都有一个score属性，代表排序权重以此为依据排序。底层实现是跳表（SkipList）加hash表。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ZADD key socre member</td><td>添加一个元素，如果已存在则更新</td></tr><tr><td>ZREM key member</td><td>删除一个元素</td></tr><tr><td>ZSCORE key member</td><td>获取member的score</td></tr><tr><td>ZRANK key member</td><td>获取member的排名</td></tr><tr><td>ZCARD key</td><td>获取元素个数</td></tr><tr><td>ZCOUNT key min max</td><td>统计指定范围内元素的个数</td></tr><tr><td>ZINCRBY key increment member</td><td>给member自增指定步长</td></tr><tr><td>ZRANGE key min max</td><td>获取指定排名范围内的元素</td></tr><tr><td>ZRANGEBYSCORE key min max</td><td>获取指定score范围内的元素</td></tr><tr><td>ZDIFF、ZINTER、ZUNION</td><td>求差集、交集、并集</td></tr></tbody></table><p>默认按升序排序，Z后加REV则按倒序排序计算。</p><h1 id="java客户端对比" tabindex="-1">Java客户端对比 <a class="header-anchor" href="#java客户端对比" aria-label="Permalink to &quot;Java客户端对比&quot;">​</a></h1><table><thead><tr><th>客户端</th><th>特征</th></tr></thead><tbody><tr><td>jedis</td><td>以Redis命令作为方法名称，学习成本低，但是线程不安全，多线程环境下要以连接池的方式使用</td></tr><tr><td>lettuce</td><td>基于Netty实现，支持同步、异步和响应式编程模式，线程安全。支持哨兵模式集群模式和管道模式</td></tr><tr><td>redisson</td><td>基于Redis实现的分布式、可伸缩的Java数据结构集合。包含诸如Map、Semaphore、AtomicLong等强大功能。</td></tr></tbody></table>`,34),i=[s];function l(h,n,p,o,k,y){return e(),d("div",null,i)}const m=t(r,[["render",l]]);export{b as __pageData,m as default};
